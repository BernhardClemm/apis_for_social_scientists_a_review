data_plot %>%
ggplot(aes(label = word,
size = n)) +
geom_text_wordcloud() +
scale_size_area(max_size = 10) +
theme_minimal()
library(tidyverse)
library(googleLanguageR)
library(tidytext)
# Authentication (through your service account's JSON key file)
gl_auth("./keys/paul-css-seminar-2021-a1e75382ae2c.json")
# Load package
library(quanteda.corpora)
# Download and store corpus
guardian_corpus <- quanteda.corpora::download("data_corpus_guardian")
# Keep text only from the corpus
text <- guardian_corpus[["documents"]][["texts"]]
# For demonstration purposes, subset the text data to 20 observations only
text <- text[1:20]
# Turn text into a data frame and add an identifier
df <- as.data.frame(text)
df <- tibble::rowid_to_column(df, "ID")
syntax_analysis <- gl_nlp(df$text, nlp_type = "analyzeSyntax")
save(syntax_analysis, file="CH_2_syntax_analysis.RData")
load("Chapter_2_df.RData")
library(tidyverse)
library(googleLanguageR)
library(tidytext)
# Authentication (through your service account's JSON key file)
gl_auth("./keys/trustme-312210-41f50915e801.json")
getwd()
# Authentication (through your service account's JSON key file)
gl_auth("./keys/trustme-312210-41f50915e801.json")
gl_auth("./keys/trustme-312210-41f50915e801.json")
# Load package
library(quanteda.corpora)
# Download and store corpus
guardian_corpus <- quanteda.corpora::download("data_corpus_guardian")
# Keep text only from the corpus
text <- guardian_corpus[["documents"]][["texts"]]
# For demonstration purposes, subset the text data to 20 observations only
text <- text[1:20]
# Turn text into a data frame and add an identifier
df <- as.data.frame(text)
df <- tibble::rowid_to_column(df, "ID")
syntax_analysis <- gl_nlp(df$text, nlp_type = "analyzeSyntax")
View(syntax_analysis)
save(syntax_analysis, file="./Chapter_2/Chapter_2_df.RData")
save(syntax_analysis, file="./Chapter_2/Chapter_2_df.RData")
load("./Chapter_2/Chapter_2_df.RData")
load("C:/Users/camil/Desktop/apis_for_social_scientists_a_review/Chapter_2_Google_NLP_API_cache/html/unnamed-chunk-12_1c60a282b667edb2af6da6e55eb013e2.RData")
load("C:/Users/camil/Desktop/apis_for_social_scientists_a_review/Chapter_2_Google_NLP_API_cache/html/unnamed-chunk-13_56aad346bfd18c7d9a86d5a69fb81c31.RData")
load("C:/Users/camil/Desktop/apis_for_social_scientists_a_review/Chapter_2_Google_NLP_API_cache/html/unnamed-chunk-13_56aad346bfd18c7d9a86d5a69fb81c31.RData")
head(syntax_analysis[["tokens"]][[1]][,1:3])
# Load packages
library(tidyverse)
library(googleLanguageR)
# Authentication (through your service account's JSON key file)
gl_auth("./keys/trustme-312210-41f50915e801.json")
df_original <- data.frame(text = "To administer medicine to animals is frequently a very difficult matter, and yet sometimes itâ€™s necessary to do so")
df_original$text <- as.character(df_original$text)
# Call the API via the function 'gl_translate() ' and specify your target language
df_translate <- gl_translate(df_original$text, target = "de")
View(df_translate)
# View some translations
head(df_translate)
df_translate$translatedText
# since the repo will be publicy available, we prefer working with the service account json file containing the key, rather than entering a key in the way proposed here
# Option 1: Accessing the API with base "httr" commands
library(httr)
key <- "AIzaSyCRZkqLj-YGqgC_uqIM2gQiLk-6GsrVSD8"
res<-GET("https://maps.googleapis.com/maps/api/place/textsearch/json?", query = list(
query = "pizza",
location = "49.487459,8.466039",
radius = 5000,
key = key
))
View(res)
key <- "AIzaSyCRZkqLj-YGqgC_uqIM2gQiLk-6GsrVSD8"
set_key(key)
library(pacman)
pacman::p_load(
tidyverse, # needed for almost any chapter in this review
ggplot2, # e.g. CH5
tidytext, # comes in handy whenever text data is being pre-processed (CH2)
devtools, # to download any package from github (e.g., RCrowdTangle in CH4)
jsonlite, # import of JSON formats (e.g., CH4)
httr, # Tools for Working with URLs and HTTP (various chapters if an API call can me made via URL)
googleLanguageR, # allows different API calls for languga processing (CH2, CH3)
RCrowdTangle, #CH4
googleway #CH5
)
devtools::install_github("quanteda/quanteda.corpora")
key <- "AIzaSyCRZkqLj-YGqgC_uqIM2gQiLk-6GsrVSD8"
set_key(key)
# since the repo will be publicy available, we prefer working with the service account json file containing the key, rather than entering a key in the way proposed here
# Option 2: Accessing the API with googleway
library(ggplot2)
library(tidyverse)
library(googleway)
# Request 'Mannheim' to get latitude and longitude information
location <- google_places("Mannheim")
# Save latitude and longitude information in vector
location <- location$results$geometry
location <- c(location$location$lat, location$location$lng)
# Google places request with googleway
pizza <- google_places("Pizza", location = location, radius = 5000, place_type = "food")
# Plot rankings as barplot
pizza$results %>%
ggplot() +
geom_col(aes(x = reorder(name, rating), y = rating)) +
geom_text(aes(x = reorder(name, rating), y = rating,
label = paste0(user_ratings_total, " ratings",
angle = 90, hjust = 0), size = 3) +
ylab("Average Rating")+
xlab("") +
ggtitle("Pizza Places in Mannheim by Rating") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 90, size = 8, hjust=0.95,vjust=0.2)
)
# Plot places to google map
map <- google_map(location = location)
# Option 2: Accessing the API with googleway
library(ggplot2)
library(tidyverse)
library(googleway)
# Request 'Mannheim' to get latitude and longitude information
location <- google_places("Mannheim")
# Save latitude and longitude information in vector
location <- location$results$geometry
location <- c(location$location$lat, location$location$lng)
# Google places request with googleway
pizza <- google_places("Pizza", location = location, radius = 5000, place_type = "food")
# Plot rankings as barplot
pizza$results %>%
ggplot() +
geom_col(aes(x = reorder(name, rating), y = rating)) +
geom_text(aes(x = reorder(name, rating), y = rating,
label = paste0(user_ratings_total, " ratings",
angle = 90, hjust = 0), size = 3)) +
ylab("Average Rating")+
xlab("") +
ggtitle("Pizza Places in Mannheim by Rating") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 90, size = 8, hjust=0.95,vjust=0.2))
# Plot places to google map
map <- google_map(location = location)
add_markers(map, data = pizza$results$geometry$location)
map
# Plot places to google map
google_map(location = location)
add_markers(map, data = pizza$results$geometry$location)
# Option 2: Accessing the API with googleway
library(ggplot2)
library(tidyverse)
library(googleway)
# Request 'Mannheim' to get latitude and longitude information
location <- google_places("Mannheim")
# Save latitude and longitude information in vector
location <- location$results$geometry
location <- c(location$location$lat, location$location$lng)
# Google places request with googleway
pizza <- google_places("Pizza", location = location, radius = 5000, place_type = "food")
# Plot rankings as barplot
pizza$results %>%
ggplot() +
geom_col(aes(x = reorder(name, rating), y = rating)) +
geom_text(aes(x = reorder(name, rating), y = rating,
label = paste0(user_ratings_total, " ratings",
angle = 90, hjust = 0), size = 3)) +
ylab("Average Rating")+
xlab("") +
ggtitle("Pizza Places in Mannheim by Rating") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 90, size = 8, hjust=0.95,vjust=0.2))
# Plot places to google map
google_map(location = location)
add_markers(map, data = pizza$results$geometry$location)
library(pacman)
pacman::p_load(
tidyverse, # needed for almost any chapter in this review
ggplot2, # e.g. CH5
tidytext, # comes in handy whenever text data is being pre-processed (CH2)
devtools, # to download any package from github (e.g., RCrowdTangle in CH4)
jsonlite, # import of JSON formats (e.g., CH4)
httr, # Tools for Working with URLs and HTTP (various chapters if an API call can me made via URL)
googleLanguageR, # allows different API calls for languga processing (CH2, CH3)
RCrowdTangle, #CH4
googleway #CH5
)
devtools::install_github("quanteda/quanteda.corpora")
devtools::install_github("cbpuschmann/RCrowdTangle")
#key <- "AIzaSyCRZkqLj-YGqgC_uqIM2gQiLk-6GsrVSD8"
#set_key(key)
gl_auth("./keys/trustme-312210-41f50915e801.json")
# since the repo will be publicy available, we prefer working with the service account json file containing the key, rather than entering a key in the way proposed here
#key <- "AIzaSyCRZkqLj-YGqgC_uqIM2gQiLk-6GsrVSD8"
#set_key(key)
gl_auth("./keys/trustme-312210-41f50915e801.json")
# since the repo will be publicy available, we prefer working with the service account json file containing the key, rather than entering a key in the way proposed here
# Option 2: Accessing the API with googleway
library(ggplot2)
library(tidyverse)
library(googleway)
# Request 'Mannheim' to get latitude and longitude information
location <- google_places("Mannheim")
pacman::p_load(
tidyverse, # needed for almost any chapter in this review
ggplot2, # e.g. CH5
tidytext, # comes in handy whenever text data is being pre-processed (CH2)
devtools, # to download any package from github (e.g., RCrowdTangle in CH4)
jsonlite, # import of JSON formats (e.g., CH4)
httr, # Tools for Working with URLs and HTTP (various chapters if an API call can me made via URL)
googleLanguageR, # allows different API calls for languga processing (CH2, CH3)
RCrowdTangle, #CH4
googleway #CH5
)
key <- "AIzaSyCRZkqLj-YGqgC_uqIM2gQiLk-6GsrVSD8"
set_key(key)
# since the repo will be publicy available, we prefer working with the service account json file containing the key, rather than entering a key in the way proposed here
set_key(key)
# Option 2: Accessing the API with googleway
library(ggplot2)
library(tidyverse)
library(googleway)
# Request 'Mannheim' to get latitude and longitude information
location <- google_places("Mannheim")
# Save latitude and longitude information in vector
location <- location$results$geometry
location <- c(location$location$lat, location$location$lng)
# Google places request with googleway
pizza <- google_places("Pizza", location = location, radius = 5000, place_type = "food")
# Plot rankings as barplot
pizza$results %>%
ggplot() +
geom_col(aes(x = reorder(name, rating), y = rating)) +
geom_text(aes(x = reorder(name, rating), y = rating,
label = paste0(user_ratings_total, " ratings",
angle = 90, hjust = 0), size = 3)) +
ylab("Average Rating")+
xlab("") +
ggtitle("Pizza Places in Mannheim by Rating") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 90, size = 8, hjust=0.95,vjust=0.2))
# Plot places to google map
google_map(location = location)
add_markers(map, data = pizza$results$geometry$location)
# Request 'Mannheim' to get latitude and longitude information
location <- google_places("Mannheim")
# Save latitude and longitude information in vector
location <- location$results$geometry
location <- c(location$location$lat, location$location$lng)
# Google places request with googleway
pizza <- google_places("Pizza", location = location, radius = 5000, place_type = "food")
# Plot rankings as barplot
pizza$results %>%
ggplot() +
geom_col(aes(x = reorder(name, rating), y = rating)) +
geom_text(aes(x = reorder(name, rating), y = rating,
label = paste0(user_ratings_total, " ratings",
angle = 90, hjust = 0), size = 3)) +
ylab("Average Rating")+
xlab("") +
ggtitle("Pizza Places in Mannheim by Rating") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 90, size = 8, hjust=0.95,vjust=0.2))
google_map(location = location)
# Plot places to google map
google_map(location = location)
# Plot places to google map
googleway::google_map(location = location)
# Plot places to google map
map<-googleway::google_map(location = location)
googleway::add_markers(map, data = pizza$results$geometry$location)
key<-readtext(paste0(DATA_DIR, "./keys/google_places_AIzaSyCRZkqLj-YGqgC_uqIM2gQiLk-6GsrVSD8.txt"))
install.packages("readtext")
key<-readtext::readtext(paste0(DATA_DIR, "./keys/google_places_AIzaSyCRZkqLj-YGqgC_uqIM2gQiLk-6GsrVSD8.txt"))
key<-readtext::readtext(paste0(google_places_AIzaSyCRZkqLj-YGqgC_uqIM2gQiLk-6GsrVSD8.txt, "./keys/*"))
key<-readtext::readtext(paste0(google_places_AIzaSyCRZkqLj-YGqgC_uqIM2gQiLk-6GsrVSD8, "./keys/*"))
key<-readtext::readtext(paste0(google_places_AIzaSyCRZkqLj-YGqgC_uqIM2gQiLk-6GsrVSD8, "./keys/*"))
key<-readtext::readtext(paste0(google_places_AIzaSyCRZkqLj-YGqgC_uqIM2gQiLk-6GsrVSD8, "./keys/*.txt"))
key<-readtext::readtext(paste0("google_places_AIzaSyCRZkqLj-YGqgC_uqIM2gQiLk-6GsrVSD8", "./keys/*.txt"))
readr::read_tsv("./keys/google_places_AIzaSyCRZkqLj-YGqgC_uqIM2gQiLk-6GsrVSD8.txt")
key<-readr::read_tsv("./keys/google_places_AIzaSyCRZkqLj-YGqgC_uqIM2gQiLk-6GsrVSD8.txt")
View(key)
set_key(key)
# Option 2: Accessing the API with googleway
library(ggplot2)
library(tidyverse)
library(googleway)
# Request 'Mannheim' to get latitude and longitude information
location <- google_places("Mannheim")
set_key(key)
key<-readr::read_tsv("./keys/google_places_AIzaSyCRZkqLj-YGqgC_uqIM2gQiLk-6GsrVSD8.txt")
set_key(readr::read_tsv("./keys/google_places_AIzaSyCRZkqLj-YGqgC_uqIM2gQiLk-6GsrVSD8.txt"))
# Option 2: Accessing the API with googleway
library(ggplot2)
library(tidyverse)
library(googleway)
# Request 'Mannheim' to get latitude and longitude information
location <- google_places("Mannheim")
readr::read_tsv("./keys/google_places_AIzaSyCRZkqLj-YGqgC_uqIM2gQiLk-6GsrVSD8.txt")
key<-readr::read_tsv("./keys/google_places_key.txt")
key<-readtext::readtext(paste0("google_places_key", "./keys/*.txt"))
key<-readtext::readtext(paste0("./keys/google_places_key.txt"))
rm(key)
key<-readtext::readtext(paste0("./keys/google_places_key.txt"))
View(key)
set_key(key$text)
# Option 2: Accessing the API with googleway
library(ggplot2)
library(tidyverse)
library(googleway)
# Request 'Mannheim' to get latitude and longitude information
location <- google_places("Mannheim")
# Save latitude and longitude information in vector
location <- location$results$geometry
location <- c(location$location$lat, location$location$lng)
# Google places request with googleway
pizza <- google_places("Pizza", location = location, radius = 5000, place_type = "food")
# Plot rankings as barplot
pizza$results %>%
ggplot() +
geom_col(aes(x = reorder(name, rating), y = rating)) +
geom_text(aes(x = reorder(name, rating), y = rating,
label = paste0(user_ratings_total, " ratings",
angle = 90, hjust = 0), size = 3)) +
ylab("Average Rating")+
xlab("") +
ggtitle("Pizza Places in Mannheim by Rating") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 90, size = 8, hjust=0.95,vjust=0.2))
# Plot places to google map
map<-googleway::google_map(location = location)
googleway::add_markers(map, data = pizza$results$geometry$location)
key<-readtext::readtext(paste0("./keys/google_places_key.txt"))
View(key)
googleway::set_key(key$text)
# Option 2: Accessing the API with googleway
library(ggplot2)
library(tidyverse)
library(googleway)
# Request 'Mannheim' to get latitude and longitude information
location <- google_places("Mannheim")
# Save latitude and longitude information in vector
location <- location$results$geometry
location <- c(location$location$lat, location$location$lng)
# Google places request with googleway
pizza <- google_places("Pizza", location = location, radius = 5000, place_type = "food")
# Plot rankings as barplot
pizza$results %>%
ggplot() +
geom_col(aes(x = reorder(name, rating), y = rating)) +
geom_text(aes(x = reorder(name, rating), y = rating,
label = paste0(user_ratings_total, " ratings",
angle = 90, hjust = 0), size = 3)) +
ylab("Average Rating")+
xlab("") +
ggtitle("Pizza Places in Mannheim by Rating") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 90, size = 8, hjust=0.95,vjust=0.2))
# Plot places to google map
map<-googleway::google_map(location = location)
googleway::add_markers(map, data = pizza$results$geometry$location)
# Option 2: Accessing the API with googleway
library(ggplot2)
library(tidyverse)
library(googleway)
# Request 'Mannheim' to get latitude and longitude information
location <- google_places("Mannheim")
# Save latitude and longitude information in vector
location <- location$results$geometry
location <- c(location$location$lat, location$location$lng)
# Google places request with googleway
pizza <- google_places("Pizza", location = location, radius = 5000, place_type = "food")
# Plot rankings as barplot
pizza$results %>%
ggplot() +
geom_col(aes(x = reorder(name, rating), y = rating)) +
geom_text(aes(x = reorder(name, rating), y = rating,
label = paste0(user_ratings_total, " ratings",
angle = 90, hjust = 0), size = 3)) +
ylab("Average Rating")+
xlab("") +
ggtitle("Pizza Places in Mannheim by Rating") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 90, size = 8, hjust=0.95,vjust=0.2))
# Plot places to google map
map<-googleway::google_map(location = location)
googleway::add_markers(map, data = pizza$results$geometry$location)
# Request 'Mannheim' to get latitude and longitude information
location <- google_places("Mannheim")
library(tidyverse)
pacman::p_load(
tidyverse, # needed for almost any chapter in this review
ggplot2, # e.g. CH5
tidytext, # comes in handy whenever text data is being pre-processed (CH2)
devtools, # to download any package from github (e.g., RCrowdTangle in CH4)
jsonlite, # import of JSON formats (e.g., CH4)
httr, # Tools for Working with URLs and HTTP (various chapters if an API call can me made via URL)
googleLanguageR, # allows different API calls for languga processing (CH2, CH3)
RCrowdTangle, #CH4
googleway #CH5
)
library(googleway)
library(dplyr)
library(tidyverse)
library(dplyr)
library(tidyverse)
library(magrittr)
library(pacman)
pacman::p_load(
tidyverse, # needed for almost any chapter in this review
ggplot2, # e.g. CH5
tidytext, # comes in handy whenever text data is being pre-processed (CH2)
devtools, # to download any package from github (e.g., RCrowdTangle in CH4)
jsonlite, # import of JSON formats (e.g., CH4)
httr, # Tools for Working with URLs and HTTP (various chapters if an API call can me made via URL)
googleLanguageR, # allows different API calls for languga processing (CH2, CH3)
RCrowdTangle, #CH4
googleway #CH5
)
devtools::install_github("quanteda/quanteda.corpora")
devtools::install_github("cbpuschmann/RCrowdTangle")
library(googleLanguageR)
# Authentication (through your service account's JSON key file)
gl_auth("./keys/trustme-312210-41f50915e801.json")
# Load package
library(quanteda.corpora)
# Download and store corpus
guardian_corpus <- quanteda.corpora::download("data_corpus_guardian")
# Keep text only from the corpus
text <- guardian_corpus[["documents"]][["texts"]]
# For demonstration purposes, subset the text data to 20 observations only
text <- text[1:20]
# Turn text into a data frame and add an identifier
df <- as.data.frame(text)
df <- tibble::rowid_to_column(df, "ID")
syntax_analysis <- gl_nlp(df$text, nlp_type = "analyzeSyntax")
head(syntax_analysis[["tokens"]][[1]][,1:3])
# Add tokens from syntax analysis to original dataframe
df$tokens <- syntax_analysis[["tokens"]]
View(df)
# Keep nouns only
df <- df %>% dplyr::mutate(nouns = map(tokens,
~ dplyr::filter(., tag == "NOUN")))
# Load package
library(ggwordcloud)
# Create the data for the plot
data_plot <- df %>%
# only keep content variable
mutate(nouns = map(nouns,
~ select(., content))) %>%
# Write tokens in all rows into a single string
unnest(nouns) %>% # unnest tokens
# Unnest tokens
unnest_tokens(output = word, input = content) %>% # generate a wordcloud
anti_join(stop_words) %>%
dplyr::count(word) %>%
filter(n > 10) #only plot words that appear more than 10 times
# Visualize in a word cloud
data_plot %>%
ggplot(aes(label = word,
size = n)) +
geom_text_wordcloud() +
scale_size_area(max_size = 10) +
theme_minimal()
install.packages("htmlwidgets")
install.packages("webshot")
webshot::install_phantomjs()
# Plot places to google map
#important: in order to display the map correctly, you will also have to enable the Maps JavaScript API on GCP
map<-googleway::google_map(location = location)
key<-readtext::readtext(paste0("./keys/google_places_key.txt"))
library(googleway)
set_key(key$text)
# Option 2: Accessing the API with googleway
library(ggplot2)
library(tidyverse)
library(googleway)
# Request 'Mannheim' to get latitude and longitude information
location <- google_places("Mannheim")
# Save latitude and longitude information in vector
location <- location$results$geometry
location <- c(location$location$lat, location$location$lng)
# Google places request with googleway
pizza <- google_places("Pizza", location = location, radius = 5000, place_type = "food")
# Plot rankings as barplot
pizza$results %>%
ggplot() +
geom_col(aes(x = reorder(name, rating), y = rating)) +
geom_text(aes(x = reorder(name, rating), y = rating,
label = paste0(user_ratings_total, " ratings",
angle = 90, hjust = 0), size = 3)) +
ylab("Average Rating")+
xlab("") +
ggtitle("Pizza Places in Mannheim by Rating") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 90, size = 8, hjust=0.95,vjust=0.2))
# Plot places to google map
#important: in order to display the map correctly, you will also have to enable the Maps JavaScript API on GCP
map<-googleway::google_map(location = location)
googleway::add_markers(map, data = pizza$results$geometry$location)
