?readtext
??readtext
library(pacman)
pacman::p_load(
dplyr, # needed for almost any chapter in this review
ggplot2, # e.g. CH5
tidytext, # comes in handy whenever text data is being pre-processed (CH2)
devtools, # to download any package from github (e.g., RCrowdTangle in CH4)
jsonlite, # import of JSON formats (e.g., CH4)
httr, # Tools for Working with URLs and HTTP (various chapters if an API call can me made via URL)
googleLanguageR, # allows different API calls for languga processing (CH2, CH3)
RCrowdTangle, #CH4
googleway, #CH5
readtext #CH5
)
devtools::install_github("quanteda/quanteda.corpora")
devtools::install_github("cbpuschmann/RCrowdTangle")
pacman::p_load(
dplyr, # needed for almost any chapter in this review
ggplot2, # e.g. CH5
tidytext, # comes in handy whenever text data is being pre-processed (CH2)
devtools, # to download any package from github (e.g., RCrowdTangle in CH4)
jsonlite, # import of JSON formats (e.g., CH4)
httr, # Tools for Working with URLs and HTTP (various chapters if an API call can me made via URL)
googleLanguageR, # allows different API calls for languga processing (CH2, CH3)
RCrowdTangle, #CH4
googleway, #CH5
mapsapi, #CH5
stars #CH5
)
# Option 1: Accessing the API with base "httr" commands
library(httr)
key <- "YOURAPIKEY"
res<-GET("https://maps.googleapis.com/maps/api/place/textsearch/json?", query = list(
query = "pizza",
location = "49.487459,8.466039",
radius = 5000,
key = key
))
?set_key
key
library(httr)
key <- "YOURAPIKEY"
res<-GET("https://maps.googleapis.com/maps/api/place/textsearch/json?", query = list(
query = "pizza",
location = "49.487459,8.466039",
radius = 5000,
key = key
))
res
paste0("./keys/google_places_key.txt")
readtext::readtext(paste0("./keys/google_places_key.txt"))
paste0("./keys/google_places_key.txt")
readtext::readtext(paste0("./keys/google_places_key.txt"))
readtext::readtext(paste0("./keys/google_places_key.txt"))$text
readtext::readtext(paste0("./keys/google_places_key.txt"))$text
key<-readtext::readtext(paste0("./keys/google_places_key.txt"))$text
key
library(googleway)
set_key(key$text)
readtext::readtext(paste0("./keys/google_places_key.txt"))
readtext::readtext(paste0("./keys/google_places_key.txt"))$text
key<-readtext::readtext(paste0("./keys/google_places_key.txt"))$text
key
key<-readtext::readtext(paste0("./keys/google_places_key.txt"))
library(googleway)
set_key(key$text)
library(ggplot2)
library(tidyverse)
library(googleway)
# Request 'Mannheim' to get latitude and longitude information
location <- googleway::google_places("Mannheim")
# Save latitude and longitude information in vector
location <- location$results$geometry
location <- c(location$location$lat, location$location$lng)
# Plot places to google map
library(mapsapi)
# for this you will also need to activate the "maps static API"
r = mapsapi::mp_map(center = ("49.48746,8.466039"), zoom = 14, key = key, quiet = TRUE)
library(stars)
plot(r)
key<-readtext::readtext(paste0("./keys/google_places_key.txt"))
library(googleway)
set_key(key$text)
# Option 2: Accessing the API with googleway
library(ggplot2)
library(tidyverse)
library(googleway)
# Request 'Mannheim' to get latitude and longitude information
location <- googleway::google_places("Mannheim")
# Save latitude and longitude information in vector
location <- location$results$geometry
location <- c(location$location$lat, location$location$lng)
# Plot places to google map
library(mapsapi)
# for this you will also need to activate the "maps static API"
r = mapsapi::mp_map(center = ("49.48746,8.466039"), zoom = 14, key = key, quiet = TRUE)
library(stars)
plot(r)
pizza <- google_places("Pizza", location = location, radius = 5000, place_type = "food")
# Plot rankings as barplot
pizza$results %>%
ggplot() +
geom_col(aes(x = reorder(name, rating), y = rating)) +
geom_text(aes(x = reorder(name, rating), y = rating),
label = paste0(pizza$results$user_ratings_total, " \n ratings"), size = 2) +
ylab("Average Rating")+
xlab("") +
ggtitle("Pizza Places in Mannheim by Rating") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 90, size = 8, hjust=0.95,vjust=0.2))
map<-googleway::google_map(location = location)
googleway::add_markers(map, data = pizza$results$geometry$location)
key<-readtext::readtext(paste0("./keys/google_places_key.txt"))
library(googleway)
set_key(key$text)
library(ggplot2)
library(tidyverse)
library(googleway)
# Request 'Mannheim' to get latitude and longitude information
location <- googleway::google_places("Mannheim")
# Save latitude and longitude information in vector
location <- location$results$geometry
location <- c(location$location$lat, location$location$lng)
library(mapsapi)
# for this you will also need to activate the "maps static API"
r = mapsapi::mp_map(center = ("49.48746,8.466039"), zoom = 14, key = key, quiet = TRUE)
library(stars)
plot(r)
pacman::p_load(
dplyr, # needed for almost any chapter in this review
ggplot2, # e.g. CH5
tidytext, # comes in handy whenever text data is being pre-processed (CH2)
devtools, # to download any package from github (e.g., RCrowdTangle in CH4)
jsonlite, # import of JSON formats (e.g., CH4)
httr, # Tools for Working with URLs and HTTP (various chapters if an API call can me made via URL)
googleLanguageR, # allows different API calls for languga processing (CH2, CH3)
RCrowdTangle, #CH4
googleway, #CH5
mapsapi, #CH5
stars, #CH5
httr
)
??POST
230/5
52*7
52*5
5*5
50*5
230/5
230/5*2
92*5
600/5
library(devtools)
install_github("imrem/partycoloR")
library(partycoloR)
partycolor(432)
gerparties <- data.frame(name=c("AfD","CDU","CSU","FDP","Gruene","Linke","SPD"),
partyfacts_id=c(1976,1375,1731,573,1816,1545,383),
lrecon=c(7,5.90,6.38,7.90,3.81,1.29,3.71),
galtan=c(9.52,5.86,7.29,3.43,1.10,2.81,3.38))
gerparties$hex <- partycolor(gerparties$partyfacts_id)
gerparties
colors <- partycolor(gerparties$partyfacts_id, type='all', include_ids = TRUE, include_description = TRUE, include_source = TRUE)
gerparties <- merge(gerparties,colors, all.x=T)
gerparties
library(ggplot2)
ggplot(gerparties,aes(x=lrecon,y=galtan, label=name)) +
theme_classic() + labs(title="", x="LRECON", y="GALTAN") +
scale_x_continuous(breaks=seq(0,10,1)) +
scale_y_continuous(breaks=seq(0,10,1)) +
geom_point(size = 6, color=gerparties$hex)
2021-2015
